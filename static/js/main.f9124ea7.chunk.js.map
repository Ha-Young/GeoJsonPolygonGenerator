{"version":3,"sources":["Information/index.js","AreaNameInput/index.js","Map/index.js","ResultTextArea/index.js","App.js","index.js"],"names":["Information","className","AreaNameInput","areaName","onAreaNameChange","polygonExtractMode","onGetPolygonBtnClick","htmlFor","name","value","onChange","onClick","POLYGON_COLOR","Map","center","level","areas","onGeoJsonPolygonAdd","onCenterChange","useState","map","setMap","makedPolygonsRef","useRef","displayArea","area","customOverlay","kakao","maps","CustomOverlay","path","location","coordinates","coordinate","LatLng","polygon","Polygon","strokeWeight","strokeColor","strokeOpacity","fillColor","fillOpacity","event","addListener","mouseEvent","setOptions","setContent","setPosition","latLng","useEffect","script","document","createElement","async","src","process","head","appendChild","onload","load","container","getElementById","options","window","drawingPolygon","areaOverlay","drawingFlag","handleDblClick","latlng","getLevel","lat","getLat","lng","getLng","handleClick","clickPosition","drawingPath","getPath","push","setPath","strokeStyle","handleMouseMove","mousePosition","length","pop","handleRightClick","content","Math","round","getArea","xAnchor","yAnchor","position","shp","i","getCenter","removeListener","current","forEach","len","id","React","memo","ResultTextArea","resultText","onResultTextChange","text","setText","e","target","navigator","clipboard","writeText","then","console","log","err","error","JSON","parse","stringify","App","setCenter","setLevel","setAreaName","setAreas","setPolygonExtractMode","areasJsonString","handleGeoJsonPolygonAdd","useCallback","geoJsonPolygon","newAreas","alert","preventDefault","jsonObj","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f9124ea7.chunk.js","sourcesContent":["import \"./index.css\";\n\nexport default function Information() {\n  return (\n    <div className=\"informationWrapper\">\n      <p>\n        <em>\n          지도를 마우스로 클릭하면 다각형 그리기가 시작되고 <br />\n          오른쪽 마우스를 클릭하면 다각형 그리기가 종료됩니다\n        </em>\n      </p>\n    </div>\n  );\n}\n","import Information from \"../Information\";\nimport \"./index.css\";\n\nexport default function AreaNameInput({\n  areaName,\n  onAreaNameChange,\n  polygonExtractMode,\n  onGetPolygonBtnClick,\n}) {\n  return (\n    <>\n    <div className=\"areaNameInputWrapper\">\n      <label htmlFor=\"areaName\">추가할 장소 이름</label>\n      <input name=\"areaName\" value={areaName} onChange={onAreaNameChange} />\n      <button onClick={onGetPolygonBtnClick}>{polygonExtractMode ? \"추출 종료하기\" : \"추출 하기\"}</button>\n    </div>\n    {polygonExtractMode && <Information />}\n    </>\n  );\n}\n","/*global kakao*/\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport \"./index.css\";\n\nconst MAP_API_KEY = process.env.REACT_APP_KAKAO_MAP_API_KEY;\nconst POLYGON_COLOR = \"#f55c47\";\n\nfunction Map({\n  center,\n  level,\n  areas,\n  onGeoJsonPolygonAdd,\n  polygonExtractMode,\n  onCenterChange,\n}) {\n  const [map, setMap] = useState(null);\n  const makedPolygonsRef = useRef([]);\n\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${MAP_API_KEY}&autoload=false`;\n    document.head.appendChild(script);\n\n    script.onload = () => {\n      kakao.maps.load(() => {\n        const container = document.getElementById(\"map\");\n        const options = {\n          center: new kakao.maps.LatLng(center[0], center[1]),\n          level,\n        };\n\n        const map = new window.kakao.maps.Map(container, options);\n\n        setMap(map);\n      });\n    };\n  }, [center, level]);\n\n  useEffect(() => {\n    let drawingFlag = false;\n    let drawingPolygon;\n    let polygon;\n    let areaOverlay;\n\n    function handleDblClick(mouseEvent) {\n      const latlng = mouseEvent.latLng;\n      const level = map.getLevel() - 1;\n\n      onCenterChange({ lat: latlng.getLat(), lng: latlng.getLng(), level });\n    }\n\n    function handleClick(mouseEvent) {\n      if (!polygonExtractMode) {\n        return;\n      }\n\n      const clickPosition = mouseEvent.latLng;\n\n      if (!drawingFlag) {\n        drawingFlag = true;\n\n        if (polygon) {\n          polygon.setMap(null);\n          polygon = null;\n        }\n\n        if (areaOverlay) {\n          areaOverlay.setMap(null);\n          areaOverlay = null;\n        }\n\n        drawingPolygon = new kakao.maps.Polygon({\n          map: map,\n          path: [clickPosition],\n          strokeWeight: 3,\n          strokeColor: POLYGON_COLOR,\n          strokeOpacity: 1,\n          strokeStyle: \"solid\",\n          fillColor: POLYGON_COLOR,\n          fillOpacity: 0.2,\n        });\n\n        polygon = new kakao.maps.Polygon({\n          path: [clickPosition],\n          strokeWeight: 3,\n          strokeColor: POLYGON_COLOR,\n          strokeOpacity: 1,\n          strokeStyle: \"solid\",\n          fillColor: POLYGON_COLOR,\n          fillOpacity: 0.2,\n        });\n      } else {\n        const drawingPath = drawingPolygon.getPath();\n        drawingPath.push(clickPosition);\n        drawingPolygon.setPath(drawingPath);\n\n        const path = polygon.getPath();\n        path.push(clickPosition);\n        polygon.setPath(path);\n      }\n    }\n\n    function handleMouseMove(mouseEvent) {\n      if (drawingFlag) {\n        const mousePosition = mouseEvent.latLng;\n\n        const path = drawingPolygon.getPath();\n\n        if (path.length > 1) {\n          path.pop();\n        }\n\n        path.push(mousePosition);\n\n        drawingPolygon.setPath(path);\n      }\n    }\n\n    function handleRightClick(mouseEvent) {\n      if (drawingFlag) {\n        drawingPolygon.setMap(null);\n        drawingPolygon = null;\n\n        const path = polygon.getPath();\n\n        if (path.length > 2) {\n          polygon.setMap(map);\n          const area = Math.round(polygon.getArea()),\n            content =\n              '<div class=\"info\">총면적 <span class=\"number\"> ' +\n              area +\n              \"</span> m<sup>2</sup></div>\";\n\n          areaOverlay = new kakao.maps.CustomOverlay({\n            map: map,\n            content: content,\n            xAnchor: 0,\n            yAnchor: 0,\n            position: path[path.length - 1],\n          });\n\n          const shp = {};\n          shp.type = \"Polygon\";\n          shp.coordinates = [[]];\n\n          for (const i in path) {\n            const lat = path[i].getLat();\n            const lng = path[i].getLng();\n            shp.coordinates[0].push([lng, lat]);\n          }\n\n          const lat = path[0].getLat();\n          const lng = path[0].getLng();\n          shp.coordinates[0].push([lng, lat]);\n\n          onGeoJsonPolygonAdd(shp, map.getCenter(), map.getLevel());\n        } else {\n          polygon = null;\n        }\n\n        drawingFlag = false;\n      }\n    }\n\n    if (map) {\n      kakao.maps.event.addListener(map, \"dblclick\", handleDblClick);\n      kakao.maps.event.addListener(map, \"click\", handleClick);\n      kakao.maps.event.addListener(map, \"mousemove\", handleMouseMove);\n      kakao.maps.event.addListener(map, \"rightclick\", handleRightClick);\n    }\n\n    return () => {\n      if (map) {\n        kakao.maps.event.removeListener(map, \"dblclick\", handleDblClick);\n        kakao.maps.event.removeListener(map, \"click\", handleClick);\n        kakao.maps.event.removeListener(map, \"mousemove\", handleMouseMove);\n        kakao.maps.event.removeListener(map, \"rightclick\", handleRightClick);\n      }\n    };\n  }, [map, onCenterChange, onGeoJsonPolygonAdd, polygonExtractMode]);\n\n  useEffect(() => {\n    if (map && areas && areas.length > 0) {\n      clearMakedPolygons();\n\n      for (var i = 0, len = areas.length; i < len; i++) {\n        const polygon = displayArea(areas[i]);\n\n        makedPolygonsRef.current.push(polygon);\n      }\n    }\n  }, [areas, map]);\n\n  function clearMakedPolygons() {\n    makedPolygonsRef.current.forEach((polygon) => polygon.setMap(null));\n    makedPolygonsRef.current = [];\n  }\n\n  function displayArea(area) {\n    let customOverlay = new kakao.maps.CustomOverlay({});;\n\n    const path = area.location.coordinates[0].map(\n      (coordinate) => new kakao.maps.LatLng(coordinate[1], coordinate[0])\n    );\n\n    const polygon = new kakao.maps.Polygon({\n      map: map,\n      path: path,\n      strokeWeight: 2,\n      strokeColor: POLYGON_COLOR,\n      strokeOpacity: 0.8,\n      fillColor: \"#fff\",\n      fillOpacity: 0.7,\n    });\n\n    kakao.maps.event.addListener(polygon, \"mouseover\", function (mouseEvent) {\n      polygon.setOptions({ fillColor: POLYGON_COLOR });\n\n      customOverlay.setContent('<div class=\"area-overay\">' + area.name + \"</div>\");\n\n      customOverlay.setPosition(mouseEvent.latLng);\n      customOverlay.setMap(map);\n    });\n\n    kakao.maps.event.addListener(polygon, \"mousemove\", function (mouseEvent) {\n      customOverlay.setPosition(mouseEvent.latLng);\n    });\n\n    kakao.maps.event.addListener(polygon, \"mouseout\", function () {\n      polygon.setOptions({ fillColor: \"#fff\" });\n      customOverlay.setMap(null);\n    });\n\n    return polygon;\n  }\n\n  return <div id=\"map\" className=\"map\"></div>;\n}\n\nexport default React.memo(Map);\n\nfunction getDistancePosition(kakaoLatLng, distance) {\n  return new kakao.maps.LatLng(kakaoLatLng.getLat() - distance, kakaoLatLng.getLng() - distance);\n}\n","import { useEffect, useState } from \"react\";\nimport \"./index.css\";\n\nexport default function ResultTextArea({ resultText, onResultTextChange }) {\n  const [text, setText] = useState(resultText);\n\n  useEffect(() => {\n    setText(resultText);\n  }, [resultText])\n\n  function handleTextChange(e) {\n    setText(e.target.value);\n    onResultTextChange(e.target.value);\n  }\n\n  function handleCopyBtnClick() {\n    navigator.clipboard.writeText(resultText).then(\n      function () {\n        console.log(\"Async: Copying to clipboard was successful!\");\n      },\n      function (err) {\n        console.error(\"Async: Could not copy text: \", err);\n      }\n    );\n  }\n\n  function handleChangeLatLngBtnClick() {\n    const areas = JSON.parse(resultText);\n\n    for (const area of areas) {\n      area.location.coordinates[0] = area.location.coordinates[0].map((latLng) => [latLng[1], latLng[0]]);\n    }\n\n    setText(JSON.stringify(areas, null, 4));\n  }\n\n  return (\n    <div className=\"resultTextAreaWrapper\">\n      <textarea value={text} onChange={handleTextChange}></textarea>\n      <button className=\"copyBtn\" onClick={handleCopyBtnClick}>copy</button>\n      <button onClick={handleChangeLatLngBtnClick}>changeLatLng</button>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport AreaNameInput from \"./AreaNameInput\";\nimport Map from \"./Map\";\nimport ResultTextArea from \"./ResultTextArea\";\n\nconst INITIAL_LAT = 37.558309;\nconst INITIAL_LNG = 126.925776;\nconst INITIAL_LEVEL = 7;\n\nfunction App() {\n  const [center, setCenter] = useState([INITIAL_LAT, INITIAL_LNG]);\n  const [level, setLevel] = useState(INITIAL_LEVEL);\n  const [areaName, setAreaName] = useState(\"\");\n  const [areas, setAreas] = useState([]);\n  const [polygonExtractMode, setPolygonExtractMode] = useState(false);\n\n  const areasJsonString = JSON.stringify(areas, null, 4);\n\n  function handleAreaNameChange(e) {\n    e.preventDefault();\n    setAreaName(e.target.value);\n  }\n\n  const handleGeoJsonPolygonAdd = useCallback((geoJsonPolygon, center, level) => {\n    if (!areaName) {\n      alert(\"장소 이름을 적어주세요 :)\");\n      return;\n    }\n\n    const area = {\n      name: areaName,\n      location: geoJsonPolygon,\n    };\n\n    const newAreas = [...areas, area];\n\n    setAreas(newAreas);\n    setCenter([center.getLat(), center.getLng()]);\n    setLevel(level);\n    setAreaName(\"\");\n    setPolygonExtractMode(!polygonExtractMode);\n  }, [areaName, areas, polygonExtractMode]);\n\n  function handleGetPolygonBtnClick() {\n    setPolygonExtractMode(!polygonExtractMode);\n  }\n\n  function handleCenterChange({ lat, lng, level }) {\n    setCenter([lat, lng]);\n    setLevel(level);\n  }\n\n  function onResultTextChange(resultText) {\n    try {\n      const jsonObj = JSON.parse(resultText);\n\n      setAreas(jsonObj);\n    } catch (err) {\n      console.log(err);\n      setAreas([...areas]);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Map\n        center={center}\n        level={level}\n        polygonExtractMode={polygonExtractMode}\n        onGeoJsonPolygonAdd={handleGeoJsonPolygonAdd}\n        onCenterChange={handleCenterChange}\n        areas={areas}\n      />\n      <AreaNameInput\n        areaName={areaName}\n        onAreaNameChange={handleAreaNameChange}\n        polygonExtractMode={polygonExtractMode}\n        onGetPolygonBtnClick={handleGetPolygonBtnClick}\n      />\n      <ResultTextArea\n        resultText={areasJsonString}\n        onResultTextChange={onResultTextChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}